#ifndef ASU_AK135
#define ASU_AK135

#include<iostream>
#include<vector>
#include<algorithm>
#include<cmath>

/***********************************************************
 * This C++ template returns AK135 model values at certain depth.
 * There's some small template you can use for just one value.
 * Will linear interpolate between layers.
 *
 * input(s):
 * const double &depth  ----  Given depth (in km)
 * double       &rho    ----  density (g/cm^3)
 * double       &vp     ----  P wave velcoity (in km/s)
 * double       &vs     ----  S wave velcoity (in km/s)
 * double       &qu     ----  Dissipation of shear energy.
 * double       &qk     ----  Dissipation of compressional energy.
 * const bool   &tt     ----  (optional) default if true. Controls the value above 120km.
 *                            return whether velocity model for travel times (true)
 *                            or spherical average velocity model (false)
 *
 * output(s):
 * double    &rho  (in-place)
 * double    &vp   (in-place)
 * double    &vs   (in-place)
 * double    &qu   (in-place)
 * double    &qk   (in-place)
 *
 * Shule Yu
 * Sep 13 2018
 *
 * Key words: ak135, reference model.
 *
 * Reference :
 *      http://rses.anu.edu.au/seismology/ak135/ak135f.html
***********************************************************/

void AK135(const double &depth, double &rho, double &vp, double &vs,
           double &qu, double &qk, const bool &tt=true){

    std::vector<double> d,r,p,s,k,u;

    if (depth<0 || depth>6371) throw std::runtime_error("In "+std::string(__func__)+": depth out of range ..");

    if (depth>=120) {
        d={120.00,165.00,210.00,210.00,260.00,310.00,360.00,410.00,410.00,460.00,510.00,560.00,610.00,660.00,660.00,710.00,760.00,809.50,859.00,908.50,958.00,1007.50,1057.00,1106.50,1156.00,1205.50,1255.00,1304.50,1354.00,1403.50,1453.00,1502.50,1552.00,1601.50,1651.00,1700.50,1750.00,1799.50,1849.00,1898.50,1948.00,1997.50,2047.00,2096.50,2146.00,2195.50,2245.00,2294.50,2344.00,2393.50,2443.00,2492.50,2542.00,2591.50,2640.00,2690.00,2740.00,2740.00,2789.67,2839.33,2891.50,2891.50,2939.33,2989.66,3039.99,3090.32,3140.66,3190.99,3241.32,3291.65,3341.98,3392.31,3442.64,3492.97,3543.30,3593.64,3643.97,3694.30,3744.63,3794.96,3845.29,3895.62,3945.95,3996.28,4046.62,4096.95,4147.28,4197.61,4247.94,4298.27,4348.60,4398.93,4449.26,4499.60,4549.93,4600.26,4650.59,4700.92,4751.25,4801.58,4851.91,4902.24,4952.58,5002.91,5053.24,5103.57,5153.50,5153.50,5204.61,5255.32,5306.04,5356.75,5407.46,5458.17,5508.89,5559.60,5610.31,5661.02,5711.74,5762.45,5813.16,5863.87,5914.59,5965.30,6016.01,6066.72,6117.44,6168.15,6218.86,6269.57,6320.29,6371.00};
        r={3.4268,3.3711,3.3243,3.3243,3.3663,3.4110,3.4577,3.5068,3.9317,3.9273,3.9233,3.9218,3.9206,3.9201,4.2387,4.2986,4.3565,4.4118,4.4650,4.5162,4.5654,4.5926,4.6198,4.6467,4.6735,4.7001,4.7266,4.7528,4.7790,4.8050,4.8307,4.8562,4.8817,4.9069,4.9321,4.9570,4.9817,5.0062,5.0306,5.0548,5.0789,5.1027,5.1264,5.1499,5.1732,5.1963,5.2192,5.2420,5.2646,5.2870,5.3092,5.3313,5.3531,5.3748,5.3962,5.4176,5.4387,5.6934,5.7196,5.7458,5.7721,9.9145,9.9942,10.0722,10.1485,10.2233,10.2964,10.3679,10.4378,10.5062,10.5731,10.6385,10.7023,10.7647,10.8257,10.8852,10.9434,11.0001,11.0555,11.1095,11.1623,11.2137,11.2639,11.3127,11.3604,11.4069,11.4521,11.4962,11.5391,11.5809,11.6216,11.6612,11.6998,11.7373,11.7737,11.8092,11.8437,11.8772,11.9098,11.9414,11.9722,12.0001,12.0311,12.0593,12.0867,12.1133,12.1391,12.7037,12.7289,12.7530,12.7760,12.7980,12.8188,12.8387,12.8574,12.8751,12.8917,12.9072,12.9217,12.9351,12.9474,12.9586,12.9688,12.9779,12.9859,12.9929,12.9988,13.0036,13.0074,13.0100,13.0117,13.0122};
        p={8.0505,8.1750,8.3007,8.3007,8.4822,8.6650,8.8476,9.0302,9.3601,9.5280,9.6962,9.8640,10.0320,10.2000,10.7909,10.9222,11.0553,11.1355,11.2228,11.3068,11.3897,11.4704,11.5493,11.6265,11.7020,11.7768,11.8491,11.9208,11.9891,12.0571,12.1247,12.1912,12.2558,12.3181,12.3813,12.4427,12.5030,12.5638,12.6226,12.6807,12.7384,12.7956,12.8524,12.9093,12.9663,13.0226,13.0786,13.1337,13.1895,13.2465,13.3017,13.3584,13.4156,13.4741,13.5311,13.5899,13.6498,13.6498,13.6533,13.6570,13.6601,8.0000,8.0382,8.1283,8.2213,8.3122,8.4001,8.4861,8.5692,8.6496,8.7283,8.8036,8.8761,8.9461,9.0138,9.0792,9.1426,9.2042,9.2634,9.3205,9.3760,9.4297,9.4814,9.5306,9.5777,9.6232,9.6673,9.7100,9.7513,9.7914,9.8304,9.8682,9.9051,9.9410,9.9761,10.0103,10.0439,10.0768,10.1095,10.1415,10.1739,10.2049,10.2329,10.2565,10.2745,10.2854,10.2890,11.0427,11.0585,11.0718,11.0850,11.0983,11.1166,11.1316,11.1457,11.1590,11.1715,11.1832,11.1941,11.2041,11.2134,11.2219,11.2295,11.2364,11.2424,11.2477,11.2521,11.2557,11.2586,11.2606,11.2618,11.2622};
        s={4.5000,4.5090,4.5184,4.5184,4.6094,4.6964,4.7832,4.8702,5.0806,5.1864,5.2922,5.3989,5.5047,5.6104,5.9607,6.0898,6.2100,6.2424,6.2799,6.3164,6.3519,6.3860,6.4182,6.4514,6.4822,6.5131,6.5431,6.5728,6.6009,6.6285,6.6554,6.6813,6.7070,6.7323,6.7579,6.7820,6.8056,6.8289,6.8517,6.8743,6.8972,6.9194,6.9416,6.9625,6.9852,7.0069,7.0286,7.0504,7.0722,7.0932,7.1144,7.1368,7.1584,7.1804,7.2031,7.2253,7.2485,7.2485,7.2593,7.2700,7.2817,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,3.5043,3.5187,3.5314,3.5435,3.5551,3.5661,3.5765,3.5864,3.5957,3.6044,3.6126,3.6202,3.6272,3.6337,3.6396,3.6450,3.6498,3.6540,3.6577,3.6608,3.6633,3.6653,3.6667,3.6675,3.6678};
        k={182.5700,188.7200,200.9700,338.4700,346.3700,355.8500,366.3400,377.9300,413.6600,417.3200,419.9400,422.5500,425.5100,428.6900,1350.5400,1311.1700,1277.9300,1269.4400,1260.6800,1251.6900,1243.0200,1234.5400,1226.5200,1217.9100,1210.0200,1202.0400,1193.9900,1186.0600,1178.1900,1170.5300,1163.1600,1156.0400,1148.7600,1141.3200,1134.0100,1127.0200,1120.0900,1108.5800,1097.1600,1085.9700,1070.3800,1064.2300,1058.0300,1048.0900,1042.0700,1032.1400,1018.3800,1008.7900,999.4400,990.7700,985.6300,976.8100,968.4600,960.3600,952.0000,940.8800,933.2100,722.7300,726.8700,725.1100,723.1200,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,57822.0000,633.2600,629.8900,626.8700,624.0800,621.5000,619.7100,617.7800,615.9300,614.2100,612.6200,611.1200,609.7400,608.4800,607.3100,606.2600,605.2800,604.4400,603.6900,603.0400,602.4900,602.0500,601.7000,601.4600,601.3200,601.2700};
        u={76.0600,76.5500,79.4000,133.7200,136.3800,139.3800,142.7600,146.5700,162.5000,164.8700,166.8000,168.7800,170.8200,172.9300,549.4500,543.4800,537.6300,531.9100,526.3200,520.8300,515.4600,510.2000,505.0500,500.0000,495.0500,490.2000,485.4400,480.7700,476.1900,471.7000,467.2900,462.9600,458.7200,454.5500,450.4500,446.4300,442.4800,436.6800,431.0300,425.5300,418.4100,414.9400,411.5200,406.5000,403.2300,398.4100,392.1600,387.6000,383.1400,378.7900,375.9400,371.7500,367.6500,363.6400,359.7100,354.6100,350.8800,271.7400,273.9700,273.9700,273.9700,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300,85.0300};
    }
    else if (tt) {
        d={0,20,20,35,35,77.5,120};
        r=std::vector<double> (d.size(),0.0/0.0);
        p={5.8,5.8,6.5,6.5,8.04,8.045,8.05};
        s={3.46,3.46,3.85,3.85,4.48,4.49,4.5};
        k=r;
        u=r;
    }
    else {
        d={0,3,3,3.3,3.3,10,10,18,18,43,80,80,120};
        r={1.02,1.02,2,2,2.6,2.6,2.92,2.92,3.641,3.5801,3.502,3.502,3.4268};
        p={1.45,1.45,1.65,1.65,5.8,5.8,6.8,6.8,8.0355,8.0379,8.04,8.045,8.0505};
        s={0,0,1,1,3.2,3.2,3.9,3.9,4.4839,4.4856,4.48,4.49,4.5};
        k={57822,57822,163.35,163.35,1478.3,1478.3,1368.02,1368.02,950.5,972.77,1008.71,182.03,182.57};
        u={0,0,80,80,599.99,599.99,599.99,599.99,394.62,403.93,417.59,75.6,76.06};
    }

    // linear interpolate.
    auto it=std::lower_bound(d.begin(),d.end(),depth);
    if (it==d.begin()) {
        rho=r[0];vp=p[0],vs=s[0],qu=u[0],qk=k[0];
    }
    else {
        std::size_t index=std::distance(d.begin(),it);
        double x=(depth-d[index-1])/(d[index]-d[index-1]);
        rho=r[index-1]+(r[index]-r[index-1])*x;
        vp=p[index-1]+(p[index]-p[index-1])*x;
        vs=s[index-1]+(s[index]-s[index-1])*x;
        qu=u[index-1]+(u[index]-u[index-1])*x;
        qk=k[index-1]+(k[index]-k[index-1])*x;
    }
    return ;
}

double Dvs_ak135(const double &depth, const bool &tt=true){
    double rho,vp,vs,qu,qk;
    AK135(depth,rho,vp,vs,qu,qk,tt);
    return vs;
}

double Dvp_ak135(const double &depth, const bool &tt=true){
    double rho,vp,vs,qu,qk;
    AK135(depth,rho,vp,vs,qu,qk, tt);
    return vp;
}

double Drho_ak135(const double &depth, const bool &tt=true){
    double rho,vp,vs,qu,qk;
    AK135(depth,rho,vp,vs,qu,qk,tt);
    return rho;
}

double Rvs_ak135(const double &radius, const bool &tt=true){
    return Dvs_ak135(6371.0-radius,tt);
}

double Rvp_ak135(const double &radius, const bool &tt=true){
    return Dvp_ak135(6371.0-radius,tt);
}

double Rrho_ak135(const double &radius, const bool &tt=true){
    return Drho_ak135(6371.0-radius,tt);
}

#endif
